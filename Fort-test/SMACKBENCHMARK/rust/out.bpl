// generated by SMACK version 1.9.1 for corral
// via /usr/local/bin/smack -bpl out.bpl --no-memory-splitting array_fail.rs

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (1 regions)
var $M.0: [ref] i8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 92136));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32768));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const {:count 34} __rustc_debug_gdb_scripts_section__: ref;
axiom (__rustc_debug_gdb_scripts_section__ == $sub.ref(0, 1058));
const panic_bounds_check_loc.a: ref;
axiom (panic_bounds_check_loc.a == $sub.ref(0, 2106));
const {:count 13} str.9: ref;
axiom (str.9 == $sub.ref(0, 3143));
const panic_loc.8: ref;
axiom (panic_loc.8 == $sub.ref(0, 4207));
const {:count 33} str.7: ref;
axiom (str.7 == $sub.ref(0, 5264));
const {:count 12} str.0: ref;
axiom (str.0 == $sub.ref(0, 6300));
const panic_loc.6: ref;
axiom (panic_loc.6 == $sub.ref(0, 7364));
const {:count 28} str.5: ref;
axiom (str.5 == $sub.ref(0, 8416));
const panic_loc.3: ref;
axiom (panic_loc.3 == $sub.ref(0, 9480));
const panic_loc.4: ref;
axiom (panic_loc.4 == $sub.ref(0, 10544));
const {:count 33} str.1: ref;
axiom (str.1 == $sub.ref(0, 11601));
const panic_loc.2: ref;
axiom (panic_loc.2 == $sub.ref(0, 12665));
const {:count 14} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 13703));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 14735));
const {:count 3} .str.1.3: ref;
axiom (.str.1.3 == $sub.ref(0, 15762));
const {:count 14} .str.397: ref;
axiom (.str.397 == $sub.ref(0, 16800));
const main: ref;
axiom (main == $sub.ref(0, 17832));
procedure {:entrypoint} main($i0: i64, $p1: ref)
  returns ($r: i64)
{
  var $i2: i8;
  var $i3: i64;
$bb0:
  call $initialize();
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call {:cexpr "smack:arg:main:$i0"} boogie_si_record_i64($i0);
  call {:cexpr "smack:arg:main:$p1"} boogie_si_record_ref($p1);
  assume {:verifier.code 0} true;
  $i2 := $load.i8($M.0, __rustc_debug_gdb_scripts_section__);
  assume {:verifier.code 0} true;
  call $i3 := _ZN3std2rt10lang_start17h832f9067ed8c4dd4E(_ZN10array_fail4main17h64ba7c3eac04fa9aE, $i0, $p1);
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const _ZN10array_fail4main17h64ba7c3eac04fa9aE: ref;
axiom (_ZN10array_fail4main17h64ba7c3eac04fa9aE == $sub.ref(0, 18864));
procedure  _ZN10array_fail4main17h64ba7c3eac04fa9aE()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i18: i1;
  var $i19: i8;
  var $p17: ref;
  var $p20: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(32, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  call _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3new17h3b503d86ec5a872eE($p1);
  assume {:branchcond $exn} true;
  goto $bb2, $bb3;
$bb2:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p5, $p4, 32, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p7, $p6, 32, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 9, 0} true;
  assume {:verifier.code 0} true;
  call _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$4push17h20ba6d6c8ba58fc9E($p0, 3);
  assume {:branchcond $exn} true;
  goto $bb6, $bb7;
$bb3:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 8, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $p17 := $exnv;
  $exn := false;
  // WARNING: unsoundly ignoring landingpad clauses...
  assume {:verifier.code 0} true;
  goto $bb17;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 7, 0} true;
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $p3;
  return;
$bb6:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  call $p8 := _ZN68_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Deref$GT$5deref17h2225a358ea74be86E($p0);
  assume {:branchcond $exn} true;
  goto $bb8, $bb9;
$bb7:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 9, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb8:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $p9 := $extractvalue($p8, 0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $i10 := $extractvalue($p8, 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $i11 := $ult.i64(0, $i10);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $i12 := $i11;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb10, $bb11;
$bb9:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb10:
  assume ($i12 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $p13 := $p9;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i64($M.0, $p13);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i64($i14, 3);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_assert($i16);
  assume {:branchcond $exn} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i12 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking18panic_bounds_check17hca28eae069525a56E(panic_bounds_check_loc.a, 0, $i10);
  assume {:branchcond $exn} true;
  goto $bb19, $bb20;
$bb12:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4drop17h97210c765e4e3f81E($p0);
  assume {:branchcond $exn} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb14:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb15:
  assume $exn;
  assume {:verifier.code 0} true;
  $p20 := $exnv;
  $exn := false;
  // WARNING: unsoundly ignoring landingpad clauses...
  assume {:verifier.code 0} true;
  $p3 := $p20;
  goto $bb5;
$bb16:
  assume ($i18 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4drop17h97210c765e4e3f81E($p0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  $p3 := $p17;
  goto $bb5;
$bb17:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i8.i1($i19);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  $p3 := $p17;
  assume {:branchcond $i18} true;
  goto $bb16, $bb18;
$bb18:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 11, 0} true;
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb5;
$bb19:
  assume !($exn);
  assume {:verifier.code 0} true;
  assume false;
$bb20:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/array_fail.rs", 10, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
}
const _ZN3std2rt10lang_start17h832f9067ed8c4dd4E: ref;
axiom (_ZN3std2rt10lang_start17h832f9067ed8c4dd4E == $sub.ref(0, 19896));
procedure  _ZN3std2rt10lang_start17h832f9067ed8c4dd4E($p0: ref, $i1: i64, $p2: ref)
  returns ($r: i64);
const rust_eh_personality: ref;
axiom (rust_eh_personality == $sub.ref(0, 20928));
procedure  rust_eh_personality($i0: i32, $i1: i32, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32);
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 21960));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3new17h3b503d86ec5a872eE: ref;
axiom (_ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3new17h3b503d86ec5a872eE == $sub.ref(0, 22992));
procedure  _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3new17h3b503d86ec5a872eE($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  call _ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$3new17hcde325fec037807fE($p1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  $p2 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p4, $p3, 24, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 210, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p5, 0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 211, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 24024));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);
const _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$4push17h20ba6d6c8ba58fc9E: ref;
axiom (_ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$4push17h20ba6d6c8ba58fc9E == $sub.ref(0, 25056));
procedure  _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$4push17h20ba6d6c8ba58fc9E($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $p5: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %"smack::Vec<isize>"* %0, i64 0, metadata !76, metadata !53), !dbg !77, !verifier.code !29
  call {:cexpr "_ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$4push17h20ba6d6c8ba58fc9E:arg:elem"} boogie_si_record_i64($i1);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  // WARNING: call void @llvm.dbg.value(metadata %"smack::Vec<isize>"* %0, i64 0, metadata !79, metadata !53), !dbg !81, !verifier.code !29
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  call $i4 := _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3cap17ha9c42005136a8043E($p0);
  assume {:branchcond $exn} true;
  goto $bb2, $bb3;
$bb2:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i3, $i4);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb3:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $p5 := $exnv;
  $exn := false;
  // WARNING: unsoundly ignoring landingpad clauses...
  assume {:verifier.code 0} true;
  goto $bb20;
$bb5:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 220, 0} true;
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $p5;
  return;
$bb6:
  assume ($i6 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  $p7 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  call _ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$4grow17hed7f073668cf404fE($p7);
  assume {:branchcond $exn} true;
  goto $bb8, $bb9;
$bb7:
  assume !(($i6 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb8:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 221, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb10:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  call $p8 := _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3ptr17hf36602ea74bad889E($p0);
  assume {:branchcond $exn} true;
  goto $bb11, $bb12;
$bb11:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i64($M.0, $p9);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  call $p11 := _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h0f54958268d94b02E($p8, $i10);
  assume {:branchcond $exn} true;
  goto $bb13, $bb14;
$bb12:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb13:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core3ptr5write17hab0a0f672f9f7a6dE($p11, $i1);
  assume {:branchcond $exn} true;
  goto $bb15, $bb16;
$bb14:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb15:
  assume !($exn);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i64($M.0, $p12);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  call $p14 := llvm.uadd.with.overflow.i64($i13, 1);
  $i15 := $add.i64($i13, 1);
  $i16 := $and.i1(0, 0);
  $i17 := $xor.i1($i16, 1);
  $i18 := $zext.i1.i32($i17);
  call __VERIFIER_assume($i18);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  $i19 := $i16;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb17, $bb18;
$bb16:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 224, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
$bb17:
  assume ($i19 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking5panic17h9c453fad145130bfE(panic_loc.6);
  assume {:branchcond $exn} true;
  goto $bb22, $bb23;
$bb18:
  assume !(($i19 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p20, $i15);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 228, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb19:
  assume ($i21 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 228, 0} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb20:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 228, 0} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i8.i1($i22);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 228, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb19, $bb21;
$bb21:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 228, 0} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb5;
$bb22:
  assume !($exn);
  assume {:verifier.code 0} true;
  assume false;
$bb23:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 227, 0} true;
  assume {:verifier.code 0} true;
  assume $exn;
  goto $bb4;
}
const _ZN68_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Deref$GT$5deref17h2225a358ea74be86E: ref;
axiom (_ZN68_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Deref$GT$5deref17h2225a358ea74be86E == $sub.ref(0, 26088));
procedure  _ZN68_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Deref$GT$5deref17h2225a358ea74be86E($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  $p2 := $p0;
  $p3 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.0, $p5);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  call $p7 := _ZN4core5slice14from_raw_parts17ha5c83caaba9c3384E($p4, $i6);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  $p8 := $extractvalue($p7, 0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  $i9 := $extractvalue($p7, 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 327, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 329, 0} true;
  assume {:verifier.code 0} true;
  assume ($extractvalue($p10, 1) == $extractvalue($u0, 1));
  assume ($extractvalue($p10, 0) == $p8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 329, 0} true;
  assume {:verifier.code 0} true;
  assume ($extractvalue($p11, 0) == $extractvalue($p10, 0));
  assume ($extractvalue($p11, 1) == $i9);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 329, 0} true;
  assume {:verifier.code 0} true;
  $r := $p11;
  $exn := false;
  return;
}
const llvm.expect.i1: ref;
axiom (llvm.expect.i1 == $sub.ref(0, 27120));
procedure  llvm.expect.i1($i0: i1, $i1: i1)
  returns ($r: i1);
const _ZN4drop17h97210c765e4e3f81E: ref;
axiom (_ZN4drop17h97210c765e4e3f81E == $sub.ref(0, 28152));
procedure  _ZN4drop17h97210c765e4e3f81E($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:verifier.code 0} true;
  call _ZN67_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h662fe000d1bddbe9E($p0);
  assume {:branchcond $exn} true;
  goto $bb1, $bb2;
$bb1:
  assume !($exn);
  assume {:verifier.code 0} true;
  call _ZN13drop_contents17h97210c765e4e3f81E($p0);
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb2:
  assume $exn;
  assume {:verifier.code 0} true;
  $p1 := $exnv;
  $exn := false;
  // WARNING: unsoundly ignoring landingpad clauses...
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  call _ZN13drop_contents17h97210c765e4e3f81E($p0);
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $p1;
  return;
}
const _ZN4core9panicking18panic_bounds_check17hca28eae069525a56E: ref;
axiom (_ZN4core9panicking18panic_bounds_check17hca28eae069525a56E == $sub.ref(0, 29184));
procedure  _ZN4core9panicking18panic_bounds_check17hca28eae069525a56E($p0: ref, $i1: i64, $i2: i64);
const _ZN67_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h662fe000d1bddbe9E: ref;
axiom (_ZN67_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h662fe000d1bddbe9E == $sub.ref(0, 30216));
procedure  _ZN67_$LT$array_fail..smack..Vec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h662fe000d1bddbe9E($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  call _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3pop17hfd345dcf37bdaddaE($p1, $p0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  $p2 := $p1;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i4 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb8:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 317, 0} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 319, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb10:
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $u1;
  return;
}
const _ZN13drop_contents17h97210c765e4e3f81E: ref;
axiom (_ZN13drop_contents17h97210c765e4e3f81E == $sub.ref(0, 31248));
procedure  _ZN13drop_contents17h97210c765e4e3f81E($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:verifier.code 0} true;
  call _ZN4drop17h9ecb03daba4ecbe2E($p1);
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZN4drop17h9ecb03daba4ecbe2E: ref;
axiom (_ZN4drop17h9ecb03daba4ecbe2E == $sub.ref(0, 32280));
procedure  _ZN4drop17h9ecb03daba4ecbe2E($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:verifier.code 0} true;
  call _ZN70_$LT$array_fail..smack..RawVec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h94ac1998ae8ab7caE($p0);
  assume {:branchcond $exn} true;
  goto $bb1, $bb2;
$bb1:
  assume !($exn);
  assume {:verifier.code 0} true;
  call _ZN13drop_contents17h9ecb03daba4ecbe2E($p0);
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb2:
  assume $exn;
  assume {:verifier.code 0} true;
  $p1 := $exnv;
  $exn := false;
  // WARNING: unsoundly ignoring landingpad clauses...
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  call _ZN13drop_contents17h9ecb03daba4ecbe2E($p0);
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $p1;
  return;
}
const _ZN70_$LT$array_fail..smack..RawVec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h94ac1998ae8ab7caE: ref;
axiom (_ZN70_$LT$array_fail..smack..RawVec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h94ac1998ae8ab7caE == $sub.ref(0, 33312));
procedure  _ZN70_$LT$array_fail..smack..RawVec$LT$T$GT$$u20$as$u20$core..ops..Drop$GT$4drop17h94ac1998ae8ab7caE($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 192, 0} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  $p2 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 192, 0} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 192, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 192, 0} true;
  assume {:verifier.code 0} true;
  call free_($p4);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 192, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 193, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZN13drop_contents17h9ecb03daba4ecbe2E: ref;
axiom (_ZN13drop_contents17h9ecb03daba4ecbe2E == $sub.ref(0, 34344));
procedure  _ZN13drop_contents17h9ecb03daba4ecbe2E($p0: ref)
{
$bb0:
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 35376));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3pop17hfd345dcf37bdaddaE: ref;
axiom (_ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3pop17hfd345dcf37bdaddaE == $sub.ref(0, 36408));
procedure  _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3pop17hfd345dcf37bdaddaE($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 232, 0} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 232, 0} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 232, 0} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, 0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 232, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i4 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 233, 0} true;
  assume {:verifier.code 0} true;
  $p5 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 233, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p5, 0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 232, 0} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume !(($i4 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i64($M.0, $p6);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  call $p8 := llvm.usub.with.overflow.i64($i7, 1);
  $i9 := $sub.i64($i7, 1);
  $i10 := $and.i1(0, 0);
  $i11 := $xor.i1($i10, 1);
  $i12 := $zext.i1.i32($i11);
  call __VERIFIER_assume($i12);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  $i13 := $i10;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb4:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 240, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb5:
  assume ($i13 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking5panic17h9c453fad145130bfE(panic_loc.8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  assume false;
$bb6:
  assume !(($i13 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p1, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 235, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p14, $i9);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  call $p15 := _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3ptr17hf36602ea74bad889E($p1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p1, 24);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.0, $p16);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  call $p18 := _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h0f54958268d94b02E($p15, $i17);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  call $i19 := _ZN4core3ptr4read17hed1de7715b0d26c1E($p18);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $p20 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p20, 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p21, 8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 237, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p22, $i19);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 232, 0} true;
  assume {:verifier.code 0} true;
  goto $bb4;
}
const llvm.usub.with.overflow.i64: ref;
axiom (llvm.usub.with.overflow.i64 == $sub.ref(0, 37440));
procedure  llvm.usub.with.overflow.i64($i0: i64, $i1: i64)
  returns ($r: ref);
const _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3ptr17hf36602ea74bad889E: ref;
axiom (_ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3ptr17hf36602ea74bad889E == $sub.ref(0, 38472));
procedure  _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3ptr17hf36602ea74bad889E($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 204, 0} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  $p2 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 204, 0} true;
  assume {:verifier.code 0} true;
  call $p3 := _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$6as_ptr17hce57b2a29f50dd2bE($p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 204, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 204, 0} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h0f54958268d94b02E: ref;
axiom (_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h0f54958268d94b02E == $sub.ref(0, 39504));
procedure  _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h0f54958268d94b02E($p0: ref, $i1: i64)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64* %0, i64 0, metadata !168, metadata !53), !dbg !169, !verifier.code !29
  call {:cexpr "_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h0f54958268d94b02E:arg:count"} boogie_si_record_i64($i1);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  // WARNING: call void @llvm.dbg.value(metadata i64* %0, i64 0, metadata !171, metadata !53), !dbg !173, !verifier.code !29
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, $mul.ref($i1, 8));
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 552, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 553, 0} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const _ZN4core3ptr4read17hed1de7715b0d26c1E: ref;
axiom (_ZN4core3ptr4read17hed1de7715b0d26c1E == $sub.ref(0, 40536));
procedure  _ZN4core3ptr4read17hed1de7715b0d26c1E($p0: ref)
  returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p3: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 137, 0} true;
  assume {:verifier.code 0} true;
  call $i2 := _ZN4core3mem13uninitialized17h767a4a32d63bb347E();
  assume {:branchcond $exn} true;
  goto $bb2, $bb3;
$bb2:
  assume !($exn);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 137, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p1, $i2);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 138, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 138, 0} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 138, 0} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p4, $p5, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 138, 0} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb3:
  assume $exn;
  assume {:verifier.code 0} true;
  $p3 := $exnv;
  $exn := false;
  // WARNING: unsoundly ignoring landingpad clauses...
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 136, 0} true;
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $p3;
  return;
$bb5:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 139, 0} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.0, $p1);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 140, 0} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb6:
  assume ($i7 == 1);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 140, 0} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb7:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 140, 0} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i8.i1(0);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 140, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb6, $bb8;
$bb8:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 140, 0} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb4;
}
const _ZN4core9panicking5panic17h9c453fad145130bfE: ref;
axiom (_ZN4core9panicking5panic17h9c453fad145130bfE == $sub.ref(0, 41568));
procedure  _ZN4core9panicking5panic17h9c453fad145130bfE($p0: ref);
const _ZN4core3mem13uninitialized17h767a4a32d63bb347E: ref;
axiom (_ZN4core3mem13uninitialized17h767a4a32d63bb347E == $sub.ref(0, 42600));
procedure  _ZN4core3mem13uninitialized17h767a4a32d63bb347E()
  returns ($r: i64)
{
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/mem.rs", 428, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/mem.rs", 429, 0} true;
  assume {:verifier.code 0} true;
  $r := $u2;
  $exn := false;
  return;
}
const _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$6as_ptr17hce57b2a29f50dd2bE: ref;
axiom (_ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$6as_ptr17hce57b2a29f50dd2bE == $sub.ref(0, 43632));
procedure  _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$6as_ptr17hce57b2a29f50dd2bE($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 151, 0} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 151, 0} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 152, 0} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const _ZN4core5slice14from_raw_parts17ha5c83caaba9c3384E: ref;
axiom (_ZN4core5slice14from_raw_parts17ha5c83caaba9c3384E == $sub.ref(0, 44664));
procedure  _ZN4core5slice14from_raw_parts17ha5c83caaba9c3384E($p0: ref, $i1: i64)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata i64* %0, i64 0, metadata !216, metadata !53), !dbg !217, !verifier.code !29
  call {:cexpr "_ZN4core5slice14from_raw_parts17ha5c83caaba9c3384E:arg:len"} boogie_si_record_i64($i1);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  // WARNING: call void @llvm.dbg.value(metadata i64* %0, i64 0, metadata !219, metadata !53), !dbg !221, !verifier.code !29
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $p2;
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p4, $p0);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p2, 8);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p5, $i1);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p6 := $p2;
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 8);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p6);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i64($M.0, $p7);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p3);
  assume {:verifier.code 0} true;
  $p11 := $p10;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p11, $p8);
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p10, 8);
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p12, $i9);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p13 := $p3;
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p3, 8);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i64($M.0, $p15);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1941, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1942, 0} true;
  assume {:verifier.code 0} true;
  assume ($extractvalue($p17, 1) == $extractvalue($u0, 1));
  assume ($extractvalue($p17, 0) == $p14);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1942, 0} true;
  assume {:verifier.code 0} true;
  assume ($extractvalue($p18, 0) == $extractvalue($p17, 0));
  assume ($extractvalue($p18, 1) == $i16);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs", 1942, 0} true;
  assume {:verifier.code 0} true;
  $r := $p18;
  $exn := false;
  return;
}
const _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3cap17ha9c42005136a8043E: ref;
axiom (_ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3cap17ha9c42005136a8043E == $sub.ref(0, 45696));
procedure  _ZN40_$LT$array_fail..smack..Vec$LT$T$GT$$GT$3cap17ha9c42005136a8043E($p0: ref)
  returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 207, 0} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  $p2 := $add.ref($p0, 16);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 207, 0} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 207, 0} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const _ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$4grow17hed7f073668cf404fE: ref;
axiom (_ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$4grow17hed7f073668cf404fE == $sub.ref(0, 46728));
procedure  _ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$4grow17hed7f073668cf404fE($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 180, 0} true;
  assume {:verifier.code 0} true;
  call $i2 := _ZN4core3mem7size_of17hc3715b1e854f6816E();
  // WARNING: %1 = call i64 @_ZN4core3mem7size_of17hc3715b1e854f6816E(), !dbg !57, !verifier.code !50
  call {:cexpr "elem_size"} boogie_si_record_i64($i2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 180, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 16);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  call $p5 := llvm.umul.with.overflow.i64(2, $i4);
  $i6 := $mul.i64(2, $i4);
  $i7 := $and.i1(0, 0);
  $i8 := $xor.i1($i7, 1);
  $i9 := $zext.i1.i32($i8);
  call __VERIFIER_assume($i9);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  $i10 := $i7;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i10 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking5panic17h9c453fad145130bfE(panic_loc.3);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 181, 0} true;
  assume {:verifier.code 0} true;
  assume false;
$bb4:
  assume !(($i10 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  $p11 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  call $p12 := _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$6as_ptr17hce57b2a29f50dd2bE($p11);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 16);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i64($M.0, $p14);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  call $p16 := llvm.umul.with.overflow.i64($i15, $i2);
  $i17 := $mul.i64($i15, $i2);
  $i18 := $and.i1(0, 0);
  $i19 := $xor.i1($i18, 1);
  $i20 := $zext.i1.i32($i19);
  call __VERIFIER_assume($i20);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  $i21 := $i18;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i21 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking5panic17h9c453fad145130bfE(panic_loc.4);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  assume false;
$bb7:
  assume !(($i21 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  call $p22 := llvm.umul.with.overflow.i64($i6, $i2);
  $i23 := $mul.i64($i6, $i2);
  $i24 := $and.i1(0, 0);
  $i25 := $xor.i1($i24, 1);
  $i26 := $zext.i1.i32($i25);
  call __VERIFIER_assume($i26);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  $i27 := $i24;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i27 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking5panic17h9c453fad145130bfE(panic_loc.4);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  assume false;
$bb9:
  assume !(($i27 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  call $p28 := _ZN10array_fail5smack13sized_realloc17h0dfb6ed11390342cE($p13, $i17, $i23);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 182, 0} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $p29 := $bitcast.ref.ref($p28);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  call _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$3new17h2b26e5e0437621e1E($p1, $p29);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $p30 := $p1;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p1, 8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.0, $p30);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i64($M.0, $p31);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $p34 := $p0;
  $p35 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p35, $p32);
  $p36 := $add.ref($p0, 8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 184, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p36, $i33);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 185, 0} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0, 16);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 185, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p37, $i6);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 186, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZN4core3ptr5write17hab0a0f672f9f7a6dE: ref;
axiom (_ZN4core3ptr5write17hab0a0f672f9f7a6dE == $sub.ref(0, 47760));
procedure  _ZN4core3ptr5write17hab0a0f672f9f7a6dE($p0: ref, $i1: i64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64* %0, i64 0, metadata !259, metadata !53), !dbg !260, !verifier.code !29
  call {:cexpr "_ZN4core3ptr5write17hab0a0f672f9f7a6dE:arg:src"} boogie_si_record_i64($i1);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  // WARNING: call void @llvm.dbg.value(metadata i64* %0, i64 0, metadata !262, metadata !53), !dbg !264, !verifier.code !29
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 213, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p0, $i1);
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 213, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/ptr.rs", 214, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb3:
  assume {:verifier.code 0} true;
  $exn := true;
  $exnv := $u1;
  return;
}
const llvm.uadd.with.overflow.i64: ref;
axiom (llvm.uadd.with.overflow.i64 == $sub.ref(0, 48792));
procedure  llvm.uadd.with.overflow.i64($i0: i64, $i1: i64)
  returns ($r: ref);
const _ZN4core3mem7size_of17hc3715b1e854f6816E: ref;
axiom (_ZN4core3mem7size_of17hc3715b1e854f6816E == $sub.ref(0, 49824));
procedure  _ZN4core3mem7size_of17hc3715b1e854f6816E()
  returns ($r: i64)
{
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/mem.rs", 192, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/mem.rs", 193, 0} true;
  assume {:verifier.code 0} true;
  $r := 8;
  $exn := false;
  return;
}
const llvm.umul.with.overflow.i64: ref;
axiom (llvm.umul.with.overflow.i64 == $sub.ref(0, 50856));
procedure  llvm.umul.with.overflow.i64($i0: i64, $i1: i64)
  returns ($r: ref);
const _ZN10array_fail5smack13sized_realloc17h0dfb6ed11390342cE: ref;
axiom (_ZN10array_fail5smack13sized_realloc17h0dfb6ed11390342cE == $sub.ref(0, 51888));
procedure  _ZN10array_fail5smack13sized_realloc17h0dfb6ed11390342cE($p0: ref, $i1: i64, $i2: i64)
  returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !276, metadata !53), !dbg !277, !verifier.code !29
  call {:cexpr "_ZN10array_fail5smack13sized_realloc17h0dfb6ed11390342cE:arg:orig_size"} boogie_si_record_i64($i1);
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !278, metadata !53), !dbg !277, !verifier.code !29
  call {:cexpr "_ZN10array_fail5smack13sized_realloc17h0dfb6ed11390342cE:arg:new_size"} boogie_si_record_i64($i2);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !280, metadata !53), !dbg !282, !verifier.code !29
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !283, metadata !53), !dbg !282, !verifier.code !29
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 108, 0} true;
  assume {:verifier.code 0} true;
  call $p3 := malloc($i2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 108, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 109, 0} true;
  assume {:verifier.code 1} true;
  call $p4 := __VERIFIER_memcpy($p3, $p0, $i1);
  call {:cexpr "smack:ext:__VERIFIER_memcpy"} boogie_si_record_ref($p4);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 109, 0} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 112, 0} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$3new17h2b26e5e0437621e1E: ref;
axiom (_ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$3new17h2b26e5e0437621e1E == $sub.ref(0, 52920));
procedure  _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$3new17h2b26e5e0437621e1E($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 147, 0} true;
  assume {:verifier.code 0} true;
  call $i2 := _ZN46_$LT$u64$u20$as$u20$core..default..Default$GT$7default17hcff98cf92cd6b087E();
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 147, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 147, 0} true;
  assume {:verifier.code 0} true;
  $p3 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 147, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p3, $p1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 147, 0} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 147, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p4, $i2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 148, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZN46_$LT$u64$u20$as$u20$core..default..Default$GT$7default17hcff98cf92cd6b087E: ref;
axiom (_ZN46_$LT$u64$u20$as$u20$core..default..Default$GT$7default17hcff98cf92cd6b087E == $sub.ref(0, 53952));
procedure  _ZN46_$LT$u64$u20$as$u20$core..default..Default$GT$7default17hcff98cf92cd6b087E()
  returns ($r: i64)
{
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/default.rs", 133, 0} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 54984));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_memcpy: ref;
axiom (__VERIFIER_memcpy == $sub.ref(0, 56016));
procedure  __VERIFIER_memcpy($p0: ref, $p1: ref, $i2: i64)
  returns ($r: ref);
const _ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$3new17hcde325fec037807fE: ref;
axiom (_ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$3new17hcde325fec037807fE == $sub.ref(0, 57048));
procedure  _ZN43_$LT$array_fail..smack..RawVec$LT$T$GT$$GT$3new17hcde325fec037807fE($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 166, 0} true;
  assume {:verifier.code 0} true;
  call $i2 := _ZN4core3mem7size_of17hc3715b1e854f6816E();
  // WARNING: %1 = call i64 @_ZN4core3mem7size_of17hc3715b1e854f6816E(), !dbg !56, !verifier.code !49
  call {:cexpr "elem_size"} boogie_si_record_i64($i2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 166, 0} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  call $p3 := llvm.umul.with.overflow.i64(32, $i2);
  $i4 := $mul.i64(32, $i2);
  $i5 := $and.i1(0, 0);
  $i6 := $xor.i1($i5, 1);
  $i7 := $zext.i1.i32($i6);
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  $i8 := $i5;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i8 == 1);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  call _ZN4core9panicking5panic17h9c453fad145130bfE(panic_loc.2);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  assume false;
$bb4:
  assume !(($i8 == 1));
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  call $p9 := malloc($i4);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  call _ZN43_$LT$array_fail..smack..Unique$LT$T$GT$$GT$3new17h2b26e5e0437621e1E($p1, $p10);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 168, 0} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $p11 := $p1;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1, 8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p11);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i64($M.0, $p12);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $p15 := $p0;
  $p16 := $p0;
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p16, $p13);
  $p17 := $add.ref($p0, 8);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p17, $i14);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 16);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 169, 0} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p18, 32);
  assume {:sourceloc "/home/vagrant/smack/gandalv/rust/smack/mod.rs", 170, 0} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 58080));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !329, metadata !53), !dbg !330, !verifier.code !29
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 35, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 36, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 59112));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 60144));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 257, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 61176));
procedure  __VERIFIER_assert($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assert:arg:x"} boogie_si_record_i32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !343, metadata !53), !dbg !344, !verifier.code !29
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 41, 21} true;
  assume {:verifier.code 1} true;
  assert $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 43, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 62208));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !352, metadata !53), !dbg !353, !verifier.code !29
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 58, 24} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 59, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 63240));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 64272));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 65304));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 66336));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 67368));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 68400));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 69432));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 70464));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 71496));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 72528));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 73560));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 74592));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 75624));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 76656));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 77688));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 78720));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 79752));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 80784));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 81816));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 82848));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 83880));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 84912));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 85944));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 86976));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 88008));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv80(i: bv1) returns (bv80) {if i == 0bv1 then 0bv80 else 1bv80}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv80(i: bv1) returns (bv80) {if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(i1: float, i2: float) returns (float);
function $fsub.float(i1: float, i2: float) returns (float);
function $fmul.float(i1: float, i2: float) returns (float);
function $fdiv.float(i1: float, i2: float) returns (float);
function $frem.float(i1: float, i2: float) returns (float);
function {:inline} $ffalse.float.bool(i1: float, i2: float) returns (bool) {false}
function {:inline} $ftrue.float.bool(i1: float, i2: float) returns (bool) {true}
function $foeq.float.bool(i1: float, i2: float) returns (bool);
function $foge.float.bool(i1: float, i2: float) returns (bool);
function $fogt.float.bool(i1: float, i2: float) returns (bool);
function $fole.float.bool(i1: float, i2: float) returns (bool);
function $folt.float.bool(i1: float, i2: float) returns (bool);
function $fone.float.bool(i1: float, i2: float) returns (bool);
function $ford.float.bool(i1: float, i2: float) returns (bool);
function $fueq.float.bool(i1: float, i2: float) returns (bool);
function $fuge.float.bool(i1: float, i2: float) returns (bool);
function $fugt.float.bool(i1: float, i2: float) returns (bool);
function $fule.float.bool(i1: float, i2: float) returns (bool);
function $fult.float.bool(i1: float, i2: float) returns (bool);
function $fune.float.bool(i1: float, i2: float) returns (bool);
function $funo.float.bool(i1: float, i2: float) returns (bool);
function $fp2si.float.i128(i: float) returns (i128);
function $fp2ui.float.i128(i: float) returns (i128);
function $fp2si.float.i96(i: float) returns (i96);
function $fp2ui.float.i96(i: float) returns (i96);
function $fp2si.float.i88(i: float) returns (i88);
function $fp2ui.float.i88(i: float) returns (i88);
function $fp2si.float.i80(i: float) returns (i80);
function $fp2ui.float.i80(i: float) returns (i80);
function $fp2si.float.i64(i: float) returns (i64);
function $fp2ui.float.i64(i: float) returns (i64);
function $fp2si.float.i56(i: float) returns (i56);
function $fp2ui.float.i56(i: float) returns (i56);
function $fp2si.float.i48(i: float) returns (i48);
function $fp2ui.float.i48(i: float) returns (i48);
function $fp2si.float.i40(i: float) returns (i40);
function $fp2ui.float.i40(i: float) returns (i40);
function $fp2si.float.i32(i: float) returns (i32);
function $fp2ui.float.i32(i: float) returns (i32);
function $fp2si.float.i24(i: float) returns (i24);
function $fp2ui.float.i24(i: float) returns (i24);
function $fp2si.float.i16(i: float) returns (i16);
function $fp2ui.float.i16(i: float) returns (i16);
function $fp2si.float.i8(i: float) returns (i8);
function $fp2ui.float.i8(i: float) returns (i8);
function $fp2si.float.i1(i: float) returns (i1);
function $fp2ui.float.i1(i: float) returns (i1);
function $si2fp.i128.float(i: i128) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $si2fp.i1.float(i: i1) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $fp2si.float.bv128(i: float) returns (bv128);
function $fp2ui.float.bv128(i: float) returns (bv128);
function $fp2si.float.bv96(i: float) returns (bv96);
function $fp2ui.float.bv96(i: float) returns (bv96);
function $fp2si.float.bv88(i: float) returns (bv88);
function $fp2ui.float.bv88(i: float) returns (bv88);
function $fp2si.float.bv80(i: float) returns (bv80);
function $fp2ui.float.bv80(i: float) returns (bv80);
function $fp2si.float.bv64(i: float) returns (bv64);
function $fp2ui.float.bv64(i: float) returns (bv64);
function $fp2si.float.bv56(i: float) returns (bv56);
function $fp2ui.float.bv56(i: float) returns (bv56);
function $fp2si.float.bv48(i: float) returns (bv48);
function $fp2ui.float.bv48(i: float) returns (bv48);
function $fp2si.float.bv40(i: float) returns (bv40);
function $fp2ui.float.bv40(i: float) returns (bv40);
function $fp2si.float.bv32(i: float) returns (bv32);
function $fp2ui.float.bv32(i: float) returns (bv32);
function $fp2si.float.bv24(i: float) returns (bv24);
function $fp2ui.float.bv24(i: float) returns (bv24);
function $fp2si.float.bv16(i: float) returns (bv16);
function $fp2ui.float.bv16(i: float) returns (bv16);
function $fp2si.float.bv8(i: float) returns (bv8);
function $fp2ui.float.bv8(i: float) returns (bv8);
function $fp2si.float.bv1(i: float) returns (bv1);
function $fp2ui.float.bv1(i: float) returns (bv1);
function $si2fp.bv128.float(i: bv128) returns (float);
function $ui2fp.bv128.float(i: bv128) returns (float);
function $si2fp.bv96.float(i: bv96) returns (float);
function $ui2fp.bv96.float(i: bv96) returns (float);
function $si2fp.bv88.float(i: bv88) returns (float);
function $ui2fp.bv88.float(i: bv88) returns (float);
function $si2fp.bv80.float(i: bv80) returns (float);
function $ui2fp.bv80.float(i: bv80) returns (float);
function $si2fp.bv64.float(i: bv64) returns (float);
function $ui2fp.bv64.float(i: bv64) returns (float);
function $si2fp.bv56.float(i: bv56) returns (float);
function $ui2fp.bv56.float(i: bv56) returns (float);
function $si2fp.bv48.float(i: bv48) returns (float);
function $ui2fp.bv48.float(i: bv48) returns (float);
function $si2fp.bv40.float(i: bv40) returns (float);
function $ui2fp.bv40.float(i: bv40) returns (float);
function $si2fp.bv32.float(i: bv32) returns (float);
function $ui2fp.bv32.float(i: bv32) returns (float);
function $si2fp.bv24.float(i: bv24) returns (float);
function $ui2fp.bv24.float(i: bv24) returns (float);
function $si2fp.bv16.float(i: bv16) returns (float);
function $ui2fp.bv16.float(i: bv16) returns (float);
function $si2fp.bv8.float(i: bv8) returns (float);
function $ui2fp.bv8.float(i: bv8) returns (float);
function $si2fp.bv1.float(i: bv1) returns (float);
function $ui2fp.bv1.float(i: bv1) returns (float);
function $fptrunc.float.float(i: float) returns (float);
function $fpext.float.float(i: float) returns (float);
function $bitcast.float.i1(i: float) returns (i1);
function $bitcast.float.bv1(i: float) returns (bv1);
function $bitcast.i1.float(i: i1) returns (float);
function $bitcast.bv1.float(i: bv1) returns (float);
function $bitcast.float.i8(i: float) returns (i8);
function $bitcast.float.bv8(i: float) returns (bv8);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.bv8.float(i: bv8) returns (float);
function $bitcast.float.i16(i: float) returns (i16);
function $bitcast.float.bv16(i: float) returns (bv16);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.bv16.float(i: bv16) returns (float);
function $bitcast.float.i32(i: float) returns (i32);
function $bitcast.float.bv32(i: float) returns (bv32);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.bv32.float(i: bv32) returns (float);
function $bitcast.float.i64(i: float) returns (i64);
function $bitcast.float.bv64(i: float) returns (bv64);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.bv64.float(i: bv64) returns (float);
function $bitcast.float.i80(i: float) returns (i80);
function $bitcast.float.bv80(i: float) returns (bv80);
function $bitcast.i80.float(i: i80) returns (float);
function $bitcast.bv80.float(i: bv80) returns (float);
axiom (forall f1, f2: float :: $foeq.float.bool(f1,f2) <==> !$fune.float.bool(f1,f2));
axiom (forall f1, f2: float :: $fone.float.bool(f1,f2) <==> !$fueq.float.bool(f1,f2));
axiom (forall f1, f2: float :: $fogt.float.bool(f1,f2) <==> !$fule.float.bool(f1,f2));
axiom (forall f1, f2: float :: $foge.float.bool(f1,f2) <==> !$fult.float.bool(f1,f2));
axiom (forall f1, f2: float :: $folt.float.bool(f1,f2) <==> !$fuge.float.bool(f1,f2));
axiom (forall f1, f2: float :: $fole.float.bool(f1,f2) <==> !$fugt.float.bool(f1,f2));
axiom (forall f1, f2: float :: $ford.float.bool(f1,f2) <==> !$funo.float.bool(f1,f2));
axiom (forall f: float, i: i8 :: $bitcast.float.i8(f) == i <==> $bitcast.i8.float(i) == f);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16) {$load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24) {$load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32) {$load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40) {$load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48) {$load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56) {$load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64) {$load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv72(M: [ref] bv8, p: ref) returns (bv72) {$load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv80(M: [ref] bv8, p: ref) returns (bv80) {$load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88) {$load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96) {$load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv104(M: [ref] bv8, p: ref) returns (bv104) {$load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv112(M: [ref] bv8, p: ref) returns (bv112) {$load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv120(M: [ref] bv8, p: ref) returns (bv120) {$load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128) {$load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv1(M: [ref] bv8, p: ref) returns (bv1) { $trunc.bv8.bv1(M[p]) }
function {:inline} $store.bytes.bv16(M: [ref] bv8, p: ref, v: bv16) returns ([ref] bv8) {$store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv24(M: [ref] bv8, p: ref, v: bv24) returns ([ref] bv8) {$store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv32(M: [ref] bv8, p: ref, v: bv32) returns ([ref] bv8) {$store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv40(M: [ref] bv8, p: ref, v: bv40) returns ([ref] bv8) {$store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv48(M: [ref] bv8, p: ref, v: bv48) returns ([ref] bv8) {$store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv56(M: [ref] bv8, p: ref, v: bv56) returns ([ref] bv8) {$store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv64(M: [ref] bv8, p: ref, v: bv64) returns ([ref] bv8) {$store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv72(M: [ref] bv8, p: ref, v: bv72) returns ([ref] bv8) {$store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv80(M: [ref] bv8, p: ref, v: bv80) returns ([ref] bv8) {$store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv88(M: [ref] bv8, p: ref, v: bv88) returns ([ref] bv8) {$store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv96(M: [ref] bv8, p: ref, v: bv96) returns ([ref] bv8) {$store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv104(M: [ref] bv8, p: ref, v: bv104) returns ([ref] bv8) {$store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv112(M: [ref] bv8, p: ref, v: bv112) returns ([ref] bv8) {$store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv120(M: [ref] bv8, p: ref, v: bv120) returns ([ref] bv8) {$store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv128(M: [ref] bv8, p: ref, v: bv128) returns ([ref] bv8) {$store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) {M[p := v]}
function {:inline} $store.bytes.bv1(M: [ref] bv8, p: ref, v: bv1) returns ([ref] bv8) {M[p := $zext.bv1.bv8(v)]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, v: float) returns ([ref] i8) { M[p := $bitcast.float.i8(v)] }
function {:inline} $load.bytes.float(M: [ref] bv8, p: ref) returns (float) { $bitcast.bv8.float(M[p]) }
function {:inline} $store.bytes.float(M:[ref]bv8, p:ref, v:float) returns ([ref]bv8) {M[p := $bitcast.float.bv8(v)]}
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 89040));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 90072));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1451, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1451, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1456, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 91104));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 92136));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.i8($M.0, __rustc_debug_gdb_scripts_section__, 1);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 1), 103);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 2), 100);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 3), 98);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 4), 95);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 5), 108);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 6), 111);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 7), 97);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 8), 100);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 9), 95);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 10), 114);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 11), 117);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 12), 115);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 13), 116);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 14), 95);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 15), 112);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 16), 114);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 17), 101);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 18), 116);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 19), 116);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 20), 121);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 21), 95);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 22), 112);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 23), 114);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 24), 105);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 25), 110);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 26), 116);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 27), 101);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 28), 114);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 29), 115);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 30), 46);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 31), 112);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 32), 121);
  $M.0 := $store.i8($M.0, $add.ref(__rustc_debug_gdb_scripts_section__, 33), 0);
  $M.0 := $store.i8($M.0, str.9, 97);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 1), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 3), 97);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 4), 121);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 5), 95);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 6), 102);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 7), 97);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 8), 105);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 9), 108);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 10), 46);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 11), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.9, 12), 115);
  $M.0 := $store.i8($M.0, str.7, 97);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 1), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 2), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 3), 101);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 4), 109);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 5), 112);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 6), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 7), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 8), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 9), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 10), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 11), 115);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 12), 117);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 13), 98);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 14), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 15), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 16), 97);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 17), 99);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 18), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 19), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 20), 119);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 21), 105);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 22), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 23), 104);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 24), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 25), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 26), 118);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 27), 101);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 28), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 29), 102);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 30), 108);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 31), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.7, 32), 119);
  $M.0 := $store.i8($M.0, str.0, 115);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 1), 109);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 2), 97);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 3), 99);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 4), 107);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 5), 47);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 6), 109);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 7), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 8), 100);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 9), 46);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 10), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.0, 11), 115);
  $M.0 := $store.i8($M.0, str.5, 97);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 1), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 2), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 3), 101);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 4), 109);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 5), 112);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 6), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 7), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 8), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 9), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 10), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 11), 97);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 12), 100);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 13), 100);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 14), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 15), 119);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 16), 105);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 17), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 18), 104);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 19), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 20), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 21), 118);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 22), 101);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 23), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 24), 102);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 25), 108);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 26), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.5, 27), 119);
  $M.0 := $store.i8($M.0, str.1, 97);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 1), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 2), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 3), 101);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 4), 109);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 5), 112);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 6), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 7), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 8), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 9), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 10), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 11), 109);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 12), 117);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 13), 108);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 14), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 15), 105);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 16), 112);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 17), 108);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 18), 121);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 19), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 20), 119);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 21), 105);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 22), 116);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 23), 104);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 24), 32);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 25), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 26), 118);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 27), 101);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 28), 114);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 29), 102);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 30), 108);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 31), 111);
  $M.0 := $store.i8($M.0, $add.ref(str.1, 32), 119);
  $M.0 := $store.ref($M.0, env_value_str, .str.1.3);
  $exn := false;
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

const $u0: ref;
const $u1: ref;
const $u2: i64;
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function $and.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function $or.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2}
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if $ule.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2}
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if $ult.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2}
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if $uge.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2}
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if $ugt.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2}
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if $sle.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2}
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if $slt.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2}
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if $sge.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2}
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if $sgt.i1.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2}
function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2}
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if $eq.i1.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2}
function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2}
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if $ne.i1.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) returns (bv1);
function $not.i1(i1: i1) returns (i1);
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) {M[p]}
function {:inline} $load.bv1(M: [ref] bv1, p: ref) returns (bv1) {M[p]}
function {:inline} $store.i1(M: [ref] i1, p: ref, v: i1) returns ([ref] i1) {M[p := v]}
function {:inline} $store.bv1(M: [ref] bv1, p: ref, v: bv1) returns ([ref] bv1) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function $and.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function $or.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2}
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if $ule.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2}
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if $ult.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2}
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if $uge.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2}
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if $ugt.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2}
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if $sle.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2}
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if $slt.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2}
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if $sge.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2}
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if $sgt.i8.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2}
function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2}
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if $eq.i8.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2}
function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2}
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if $ne.i8.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) returns (bv8);
function $not.i8(i1: i8) returns (i8);
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) {M[p]}
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) {M[p]}
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) {M[p := v]}
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function $and.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function $or.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2}
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if $ule.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2}
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if $ult.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2}
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if $uge.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2}
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if $ugt.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2}
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if $sle.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2}
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if $slt.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2}
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if $sge.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2}
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if $sgt.i16.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2}
function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2}
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if $eq.i16.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2}
function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2}
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if $ne.i16.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) returns (bv16);
function $not.i16(i1: i16) returns (i16);
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) {M[p]}
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) {M[p]}
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) {M[p := v]}
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function $and.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function $or.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2}
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if $ule.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2}
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if $ult.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2}
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if $uge.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2}
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if $ugt.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2}
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if $sle.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2}
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if $slt.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2}
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if $sge.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2}
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if $sgt.i24.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2}
function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2}
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if $eq.i24.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2}
function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2}
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if $ne.i24.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) returns (bv24);
function $not.i24(i1: i24) returns (i24);
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) {M[p]}
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) {M[p]}
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) {M[p := v]}
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function $and.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function $or.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2}
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if $ule.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2}
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if $ult.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2}
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if $uge.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2}
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if $ugt.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2}
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if $sle.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2}
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if $slt.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2}
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if $sge.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2}
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if $sgt.i32.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2}
function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2}
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if $eq.i32.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2}
function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2}
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if $ne.i32.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) returns (bv32);
function $not.i32(i1: i32) returns (i32);
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) {M[p]}
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) {M[p]}
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) {M[p := v]}
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function $and.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function $or.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2}
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if $ule.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2}
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if $ult.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2}
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if $uge.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2}
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if $ugt.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2}
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if $sle.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2}
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if $slt.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2}
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if $sge.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2}
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if $sgt.i40.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2}
function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2}
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if $eq.i40.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2}
function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2}
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if $ne.i40.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) returns (bv40);
function $not.i40(i1: i40) returns (i40);
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) {M[p]}
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) {M[p]}
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) {M[p := v]}
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function $and.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function $or.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2}
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if $ule.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2}
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if $ult.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2}
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if $uge.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2}
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if $ugt.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2}
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if $sle.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2}
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if $slt.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2}
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if $sge.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2}
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if $sgt.i48.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2}
function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2}
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if $eq.i48.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2}
function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2}
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if $ne.i48.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) returns (bv48);
function $not.i48(i1: i48) returns (i48);
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) {M[p]}
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) {M[p]}
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) {M[p := v]}
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function $and.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function $or.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2}
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if $ule.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2}
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if $ult.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2}
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if $uge.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2}
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if $ugt.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2}
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if $sle.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2}
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if $slt.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2}
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if $sge.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2}
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if $sgt.i56.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2}
function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2}
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if $eq.i56.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2}
function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2}
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if $ne.i56.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) returns (bv56);
function $not.i56(i1: i56) returns (i56);
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) {M[p]}
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) {M[p]}
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) {M[p := v]}
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function $and.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function $or.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2}
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if $ule.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2}
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if $ult.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2}
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if $uge.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2}
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if $ugt.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2}
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if $sle.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2}
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if $slt.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2}
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if $sge.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2}
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if $sgt.i64.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2}
function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2}
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if $eq.i64.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2}
function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2}
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if $ne.i64.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) returns (bv64);
function $not.i64(i1: i64) returns (i64);
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) {M[p]}
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) {M[p]}
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) {M[p := v]}
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) returns (bv80);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) returns (bv80);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) returns (bv80);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) returns (bv80);
function $and.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) returns (bv80);
function $or.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) returns (bv80);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) returns (bv80);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ule.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) {i1 <= i2}
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) {if $ule.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ult.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) {i1 < i2}
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) {if $ult.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $uge.bv80(i1: bv80, i2: bv80) returns (bv1) {if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) {i1 >= i2}
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) {if $uge.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ugt.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) {i1 > i2}
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) {if $ugt.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sle.bv80(i1: bv80, i2: bv80) returns (bv1) {if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) {i1 <= i2}
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) {if $sle.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $slt.bv80(i1: bv80, i2: bv80) returns (bv1) {if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) {i1 < i2}
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) {if $slt.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sge.bv80(i1: bv80, i2: bv80) returns (bv1) {if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) {i1 >= i2}
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) {if $sge.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sgt.bv80(i1: bv80, i2: bv80) returns (bv1) {if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) {i1 > i2}
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) {if $sgt.i80.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) returns (bool) {i1 == i2}
function {:inline} $eq.bv80(i1: bv80, i2: bv80) returns (bv1) {if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) {i1 == i2}
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) {if $eq.i80.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) returns (bool) {i1 != i2}
function {:inline} $ne.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) {i1 != i2}
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) {if $ne.i80.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv80(i1: bv80, i2: bv80) returns (bv80) {if $slt.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv80(i1: bv80, i2: bv80) returns (bv80) {if $sgt.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv80(i1: bv80, i2: bv80) returns (bv80) {if $ult.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv80(i1: bv80, i2: bv80) returns (bv80) {if $ugt.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) {$min(i1,i2)}
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) {$max(i1,i2)}
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) {$min(i1,i2)}
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) returns (bv80);
function $not.i80(i1: i80) returns (i80);
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) {M[p]}
function {:inline} $load.bv80(M: [ref] bv80, p: ref) returns (bv80) {M[p]}
function {:inline} $store.i80(M: [ref] i80, p: ref, v: i80) returns ([ref] i80) {M[p := v]}
function {:inline} $store.bv80(M: [ref] bv80, p: ref, v: bv80) returns ([ref] bv80) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function $and.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function $or.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2}
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if $ule.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2}
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if $ult.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2}
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if $uge.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2}
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if $ugt.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2}
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if $sle.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2}
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if $slt.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2}
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if $sge.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2}
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if $sgt.i88.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2}
function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2}
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if $eq.i88.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2}
function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2}
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if $ne.i88.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) returns (bv88);
function $not.i88(i1: i88) returns (i88);
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) {M[p]}
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) {M[p]}
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) {M[p := v]}
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function $and.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function $or.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2}
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if $ule.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2}
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if $ult.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2}
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if $uge.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2}
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if $ugt.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2}
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if $sle.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2}
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if $slt.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2}
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if $sge.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2}
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if $sgt.i96.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2}
function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2}
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if $eq.i96.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2}
function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2}
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if $ne.i96.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) returns (bv96);
function $not.i96(i1: i96) returns (i96);
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) {M[p]}
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) {M[p]}
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) {M[p := v]}
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function $and.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function $or.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2}
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if $ule.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2}
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if $ult.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2}
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if $uge.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2}
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if $ugt.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2}
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if $sle.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2}
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if $slt.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2}
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if $sge.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2}
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if $sgt.i128.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2}
function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2}
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if $eq.i128.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2}
function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2}
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if $ne.i128.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) returns (bv128);
function $not.i128(i1: i128) returns (i128);
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) {M[p]}
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) {M[p]}
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) {M[p := v]}
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) {M[p := v]}
function {:inline} $trunc.bv8.bv1(i1: bv8) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i8.i1(i1: i8) returns (i1) {i1}
function {:inline} $zext.i1.i8(i1: i1) returns (i8) {i1}
function {:inline} $sext.i1.i8(i1: i1) returns (i8) {i1}
function {:inline} $trunc.bv16.bv1(i1: bv16) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i16.i1(i1: i16) returns (i1) {i1}
function {:inline} $zext.i1.i16(i1: i1) returns (i16) {i1}
function {:inline} $sext.i1.i16(i1: i1) returns (i16) {i1}
function {:inline} $trunc.bv24.bv1(i1: bv24) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i24.i1(i1: i24) returns (i1) {i1}
function {:inline} $zext.i1.i24(i1: i1) returns (i24) {i1}
function {:inline} $sext.i1.i24(i1: i1) returns (i24) {i1}
function {:inline} $trunc.bv32.bv1(i1: bv32) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i32.i1(i1: i32) returns (i1) {i1}
function {:inline} $zext.i1.i32(i1: i1) returns (i32) {i1}
function {:inline} $sext.i1.i32(i1: i1) returns (i32) {i1}
function {:inline} $trunc.bv40.bv1(i1: bv40) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i40.i1(i1: i40) returns (i1) {i1}
function {:inline} $zext.i1.i40(i1: i1) returns (i40) {i1}
function {:inline} $sext.i1.i40(i1: i1) returns (i40) {i1}
function {:inline} $trunc.bv48.bv1(i1: bv48) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i48.i1(i1: i48) returns (i1) {i1}
function {:inline} $zext.i1.i48(i1: i1) returns (i48) {i1}
function {:inline} $sext.i1.i48(i1: i1) returns (i48) {i1}
function {:inline} $trunc.bv56.bv1(i1: bv56) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i56.i1(i1: i56) returns (i1) {i1}
function {:inline} $zext.i1.i56(i1: i1) returns (i56) {i1}
function {:inline} $sext.i1.i56(i1: i1) returns (i56) {i1}
function {:inline} $trunc.bv64.bv1(i1: bv64) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i64.i1(i1: i64) returns (i1) {i1}
function {:inline} $zext.i1.i64(i1: i1) returns (i64) {i1}
function {:inline} $sext.i1.i64(i1: i1) returns (i64) {i1}
function {:inline} $trunc.bv80.bv1(i1: bv80) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i80.i1(i1: i80) returns (i1) {i1}
function {:inline} $zext.i1.i80(i1: i1) returns (i80) {i1}
function {:inline} $sext.i1.i80(i1: i1) returns (i80) {i1}
function {:inline} $trunc.bv88.bv1(i1: bv88) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i88.i1(i1: i88) returns (i1) {i1}
function {:inline} $zext.i1.i88(i1: i1) returns (i88) {i1}
function {:inline} $sext.i1.i88(i1: i1) returns (i88) {i1}
function {:inline} $trunc.bv96.bv1(i1: bv96) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i96.i1(i1: i96) returns (i1) {i1}
function {:inline} $zext.i1.i96(i1: i1) returns (i96) {i1}
function {:inline} $sext.i1.i96(i1: i1) returns (i96) {i1}
function {:inline} $trunc.bv128.bv1(i1: bv128) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i128.i1(i1: i128) returns (i1) {i1}
function {:inline} $zext.i1.i128(i1: i1) returns (i128) {i1}
function {:inline} $sext.i1.i128(i1: i1) returns (i128) {i1}
function {:inline} $trunc.bv16.bv8(i1: bv16) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i16.i8(i1: i16) returns (i8) {i1}
function {:inline} $zext.i8.i16(i1: i8) returns (i16) {i1}
function {:inline} $sext.i8.i16(i1: i8) returns (i16) {i1}
function {:inline} $trunc.bv24.bv8(i1: bv24) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i24.i8(i1: i24) returns (i8) {i1}
function {:inline} $zext.i8.i24(i1: i8) returns (i24) {i1}
function {:inline} $sext.i8.i24(i1: i8) returns (i24) {i1}
function {:inline} $trunc.bv32.bv8(i1: bv32) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i32.i8(i1: i32) returns (i8) {i1}
function {:inline} $zext.i8.i32(i1: i8) returns (i32) {i1}
function {:inline} $sext.i8.i32(i1: i8) returns (i32) {i1}
function {:inline} $trunc.bv40.bv8(i1: bv40) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i40.i8(i1: i40) returns (i8) {i1}
function {:inline} $zext.i8.i40(i1: i8) returns (i40) {i1}
function {:inline} $sext.i8.i40(i1: i8) returns (i40) {i1}
function {:inline} $trunc.bv48.bv8(i1: bv48) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i48.i8(i1: i48) returns (i8) {i1}
function {:inline} $zext.i8.i48(i1: i8) returns (i48) {i1}
function {:inline} $sext.i8.i48(i1: i8) returns (i48) {i1}
function {:inline} $trunc.bv56.bv8(i1: bv56) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i56.i8(i1: i56) returns (i8) {i1}
function {:inline} $zext.i8.i56(i1: i8) returns (i56) {i1}
function {:inline} $sext.i8.i56(i1: i8) returns (i56) {i1}
function {:inline} $trunc.bv64.bv8(i1: bv64) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i64.i8(i1: i64) returns (i8) {i1}
function {:inline} $zext.i8.i64(i1: i8) returns (i64) {i1}
function {:inline} $sext.i8.i64(i1: i8) returns (i64) {i1}
function {:inline} $trunc.bv80.bv8(i1: bv80) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i80.i8(i1: i80) returns (i8) {i1}
function {:inline} $zext.i8.i80(i1: i8) returns (i80) {i1}
function {:inline} $sext.i8.i80(i1: i8) returns (i80) {i1}
function {:inline} $trunc.bv88.bv8(i1: bv88) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i88.i8(i1: i88) returns (i8) {i1}
function {:inline} $zext.i8.i88(i1: i8) returns (i88) {i1}
function {:inline} $sext.i8.i88(i1: i8) returns (i88) {i1}
function {:inline} $trunc.bv96.bv8(i1: bv96) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i96.i8(i1: i96) returns (i8) {i1}
function {:inline} $zext.i8.i96(i1: i8) returns (i96) {i1}
function {:inline} $sext.i8.i96(i1: i8) returns (i96) {i1}
function {:inline} $trunc.bv128.bv8(i1: bv128) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i128.i8(i1: i128) returns (i8) {i1}
function {:inline} $zext.i8.i128(i1: i8) returns (i128) {i1}
function {:inline} $sext.i8.i128(i1: i8) returns (i128) {i1}
function {:inline} $trunc.bv24.bv16(i1: bv24) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i24.i16(i1: i24) returns (i16) {i1}
function {:inline} $zext.i16.i24(i1: i16) returns (i24) {i1}
function {:inline} $sext.i16.i24(i1: i16) returns (i24) {i1}
function {:inline} $trunc.bv32.bv16(i1: bv32) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i32.i16(i1: i32) returns (i16) {i1}
function {:inline} $zext.i16.i32(i1: i16) returns (i32) {i1}
function {:inline} $sext.i16.i32(i1: i16) returns (i32) {i1}
function {:inline} $trunc.bv40.bv16(i1: bv40) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i40.i16(i1: i40) returns (i16) {i1}
function {:inline} $zext.i16.i40(i1: i16) returns (i40) {i1}
function {:inline} $sext.i16.i40(i1: i16) returns (i40) {i1}
function {:inline} $trunc.bv48.bv16(i1: bv48) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i48.i16(i1: i48) returns (i16) {i1}
function {:inline} $zext.i16.i48(i1: i16) returns (i48) {i1}
function {:inline} $sext.i16.i48(i1: i16) returns (i48) {i1}
function {:inline} $trunc.bv56.bv16(i1: bv56) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i56.i16(i1: i56) returns (i16) {i1}
function {:inline} $zext.i16.i56(i1: i16) returns (i56) {i1}
function {:inline} $sext.i16.i56(i1: i16) returns (i56) {i1}
function {:inline} $trunc.bv64.bv16(i1: bv64) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i64.i16(i1: i64) returns (i16) {i1}
function {:inline} $zext.i16.i64(i1: i16) returns (i64) {i1}
function {:inline} $sext.i16.i64(i1: i16) returns (i64) {i1}
function {:inline} $trunc.bv80.bv16(i1: bv80) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i80.i16(i1: i80) returns (i16) {i1}
function {:inline} $zext.i16.i80(i1: i16) returns (i80) {i1}
function {:inline} $sext.i16.i80(i1: i16) returns (i80) {i1}
function {:inline} $trunc.bv88.bv16(i1: bv88) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i88.i16(i1: i88) returns (i16) {i1}
function {:inline} $zext.i16.i88(i1: i16) returns (i88) {i1}
function {:inline} $sext.i16.i88(i1: i16) returns (i88) {i1}
function {:inline} $trunc.bv96.bv16(i1: bv96) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i96.i16(i1: i96) returns (i16) {i1}
function {:inline} $zext.i16.i96(i1: i16) returns (i96) {i1}
function {:inline} $sext.i16.i96(i1: i16) returns (i96) {i1}
function {:inline} $trunc.bv128.bv16(i1: bv128) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i128.i16(i1: i128) returns (i16) {i1}
function {:inline} $zext.i16.i128(i1: i16) returns (i128) {i1}
function {:inline} $sext.i16.i128(i1: i16) returns (i128) {i1}
function {:inline} $trunc.bv32.bv24(i1: bv32) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i32.i24(i1: i32) returns (i24) {i1}
function {:inline} $zext.i24.i32(i1: i24) returns (i32) {i1}
function {:inline} $sext.i24.i32(i1: i24) returns (i32) {i1}
function {:inline} $trunc.bv40.bv24(i1: bv40) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i40.i24(i1: i40) returns (i24) {i1}
function {:inline} $zext.i24.i40(i1: i24) returns (i40) {i1}
function {:inline} $sext.i24.i40(i1: i24) returns (i40) {i1}
function {:inline} $trunc.bv48.bv24(i1: bv48) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i48.i24(i1: i48) returns (i24) {i1}
function {:inline} $zext.i24.i48(i1: i24) returns (i48) {i1}
function {:inline} $sext.i24.i48(i1: i24) returns (i48) {i1}
function {:inline} $trunc.bv56.bv24(i1: bv56) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i56.i24(i1: i56) returns (i24) {i1}
function {:inline} $zext.i24.i56(i1: i24) returns (i56) {i1}
function {:inline} $sext.i24.i56(i1: i24) returns (i56) {i1}
function {:inline} $trunc.bv64.bv24(i1: bv64) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i64.i24(i1: i64) returns (i24) {i1}
function {:inline} $zext.i24.i64(i1: i24) returns (i64) {i1}
function {:inline} $sext.i24.i64(i1: i24) returns (i64) {i1}
function {:inline} $trunc.bv80.bv24(i1: bv80) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i80.i24(i1: i80) returns (i24) {i1}
function {:inline} $zext.i24.i80(i1: i24) returns (i80) {i1}
function {:inline} $sext.i24.i80(i1: i24) returns (i80) {i1}
function {:inline} $trunc.bv88.bv24(i1: bv88) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i88.i24(i1: i88) returns (i24) {i1}
function {:inline} $zext.i24.i88(i1: i24) returns (i88) {i1}
function {:inline} $sext.i24.i88(i1: i24) returns (i88) {i1}
function {:inline} $trunc.bv96.bv24(i1: bv96) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i96.i24(i1: i96) returns (i24) {i1}
function {:inline} $zext.i24.i96(i1: i24) returns (i96) {i1}
function {:inline} $sext.i24.i96(i1: i24) returns (i96) {i1}
function {:inline} $trunc.bv128.bv24(i1: bv128) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i128.i24(i1: i128) returns (i24) {i1}
function {:inline} $zext.i24.i128(i1: i24) returns (i128) {i1}
function {:inline} $sext.i24.i128(i1: i24) returns (i128) {i1}
function {:inline} $trunc.bv40.bv32(i1: bv40) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i40.i32(i1: i40) returns (i32) {i1}
function {:inline} $zext.i32.i40(i1: i32) returns (i40) {i1}
function {:inline} $sext.i32.i40(i1: i32) returns (i40) {i1}
function {:inline} $trunc.bv48.bv32(i1: bv48) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i48.i32(i1: i48) returns (i32) {i1}
function {:inline} $zext.i32.i48(i1: i32) returns (i48) {i1}
function {:inline} $sext.i32.i48(i1: i32) returns (i48) {i1}
function {:inline} $trunc.bv56.bv32(i1: bv56) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i56.i32(i1: i56) returns (i32) {i1}
function {:inline} $zext.i32.i56(i1: i32) returns (i56) {i1}
function {:inline} $sext.i32.i56(i1: i32) returns (i56) {i1}
function {:inline} $trunc.bv64.bv32(i1: bv64) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i64.i32(i1: i64) returns (i32) {i1}
function {:inline} $zext.i32.i64(i1: i32) returns (i64) {i1}
function {:inline} $sext.i32.i64(i1: i32) returns (i64) {i1}
function {:inline} $trunc.bv80.bv32(i1: bv80) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i80.i32(i1: i80) returns (i32) {i1}
function {:inline} $zext.i32.i80(i1: i32) returns (i80) {i1}
function {:inline} $sext.i32.i80(i1: i32) returns (i80) {i1}
function {:inline} $trunc.bv88.bv32(i1: bv88) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i88.i32(i1: i88) returns (i32) {i1}
function {:inline} $zext.i32.i88(i1: i32) returns (i88) {i1}
function {:inline} $sext.i32.i88(i1: i32) returns (i88) {i1}
function {:inline} $trunc.bv96.bv32(i1: bv96) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i96.i32(i1: i96) returns (i32) {i1}
function {:inline} $zext.i32.i96(i1: i32) returns (i96) {i1}
function {:inline} $sext.i32.i96(i1: i32) returns (i96) {i1}
function {:inline} $trunc.bv128.bv32(i1: bv128) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i128.i32(i1: i128) returns (i32) {i1}
function {:inline} $zext.i32.i128(i1: i32) returns (i128) {i1}
function {:inline} $sext.i32.i128(i1: i32) returns (i128) {i1}
function {:inline} $trunc.bv48.bv40(i1: bv48) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i48.i40(i1: i48) returns (i40) {i1}
function {:inline} $zext.i40.i48(i1: i40) returns (i48) {i1}
function {:inline} $sext.i40.i48(i1: i40) returns (i48) {i1}
function {:inline} $trunc.bv56.bv40(i1: bv56) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i56.i40(i1: i56) returns (i40) {i1}
function {:inline} $zext.i40.i56(i1: i40) returns (i56) {i1}
function {:inline} $sext.i40.i56(i1: i40) returns (i56) {i1}
function {:inline} $trunc.bv64.bv40(i1: bv64) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i64.i40(i1: i64) returns (i40) {i1}
function {:inline} $zext.i40.i64(i1: i40) returns (i64) {i1}
function {:inline} $sext.i40.i64(i1: i40) returns (i64) {i1}
function {:inline} $trunc.bv80.bv40(i1: bv80) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i80.i40(i1: i80) returns (i40) {i1}
function {:inline} $zext.i40.i80(i1: i40) returns (i80) {i1}
function {:inline} $sext.i40.i80(i1: i40) returns (i80) {i1}
function {:inline} $trunc.bv88.bv40(i1: bv88) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i88.i40(i1: i88) returns (i40) {i1}
function {:inline} $zext.i40.i88(i1: i40) returns (i88) {i1}
function {:inline} $sext.i40.i88(i1: i40) returns (i88) {i1}
function {:inline} $trunc.bv96.bv40(i1: bv96) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i96.i40(i1: i96) returns (i40) {i1}
function {:inline} $zext.i40.i96(i1: i40) returns (i96) {i1}
function {:inline} $sext.i40.i96(i1: i40) returns (i96) {i1}
function {:inline} $trunc.bv128.bv40(i1: bv128) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i128.i40(i1: i128) returns (i40) {i1}
function {:inline} $zext.i40.i128(i1: i40) returns (i128) {i1}
function {:inline} $sext.i40.i128(i1: i40) returns (i128) {i1}
function {:inline} $trunc.bv56.bv48(i1: bv56) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i56.i48(i1: i56) returns (i48) {i1}
function {:inline} $zext.i48.i56(i1: i48) returns (i56) {i1}
function {:inline} $sext.i48.i56(i1: i48) returns (i56) {i1}
function {:inline} $trunc.bv64.bv48(i1: bv64) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i64.i48(i1: i64) returns (i48) {i1}
function {:inline} $zext.i48.i64(i1: i48) returns (i64) {i1}
function {:inline} $sext.i48.i64(i1: i48) returns (i64) {i1}
function {:inline} $trunc.bv80.bv48(i1: bv80) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i80.i48(i1: i80) returns (i48) {i1}
function {:inline} $zext.i48.i80(i1: i48) returns (i80) {i1}
function {:inline} $sext.i48.i80(i1: i48) returns (i80) {i1}
function {:inline} $trunc.bv88.bv48(i1: bv88) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i88.i48(i1: i88) returns (i48) {i1}
function {:inline} $zext.i48.i88(i1: i48) returns (i88) {i1}
function {:inline} $sext.i48.i88(i1: i48) returns (i88) {i1}
function {:inline} $trunc.bv96.bv48(i1: bv96) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i96.i48(i1: i96) returns (i48) {i1}
function {:inline} $zext.i48.i96(i1: i48) returns (i96) {i1}
function {:inline} $sext.i48.i96(i1: i48) returns (i96) {i1}
function {:inline} $trunc.bv128.bv48(i1: bv128) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i128.i48(i1: i128) returns (i48) {i1}
function {:inline} $zext.i48.i128(i1: i48) returns (i128) {i1}
function {:inline} $sext.i48.i128(i1: i48) returns (i128) {i1}
function {:inline} $trunc.bv64.bv56(i1: bv64) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i64.i56(i1: i64) returns (i56) {i1}
function {:inline} $zext.i56.i64(i1: i56) returns (i64) {i1}
function {:inline} $sext.i56.i64(i1: i56) returns (i64) {i1}
function {:inline} $trunc.bv80.bv56(i1: bv80) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i80.i56(i1: i80) returns (i56) {i1}
function {:inline} $zext.i56.i80(i1: i56) returns (i80) {i1}
function {:inline} $sext.i56.i80(i1: i56) returns (i80) {i1}
function {:inline} $trunc.bv88.bv56(i1: bv88) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i88.i56(i1: i88) returns (i56) {i1}
function {:inline} $zext.i56.i88(i1: i56) returns (i88) {i1}
function {:inline} $sext.i56.i88(i1: i56) returns (i88) {i1}
function {:inline} $trunc.bv96.bv56(i1: bv96) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i96.i56(i1: i96) returns (i56) {i1}
function {:inline} $zext.i56.i96(i1: i56) returns (i96) {i1}
function {:inline} $sext.i56.i96(i1: i56) returns (i96) {i1}
function {:inline} $trunc.bv128.bv56(i1: bv128) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i128.i56(i1: i128) returns (i56) {i1}
function {:inline} $zext.i56.i128(i1: i56) returns (i128) {i1}
function {:inline} $sext.i56.i128(i1: i56) returns (i128) {i1}
function {:inline} $trunc.bv80.bv64(i1: bv80) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i80.i64(i1: i80) returns (i64) {i1}
function {:inline} $zext.i64.i80(i1: i64) returns (i80) {i1}
function {:inline} $sext.i64.i80(i1: i64) returns (i80) {i1}
function {:inline} $trunc.bv88.bv64(i1: bv88) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i88.i64(i1: i88) returns (i64) {i1}
function {:inline} $zext.i64.i88(i1: i64) returns (i88) {i1}
function {:inline} $sext.i64.i88(i1: i64) returns (i88) {i1}
function {:inline} $trunc.bv96.bv64(i1: bv96) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i96.i64(i1: i96) returns (i64) {i1}
function {:inline} $zext.i64.i96(i1: i64) returns (i96) {i1}
function {:inline} $sext.i64.i96(i1: i64) returns (i96) {i1}
function {:inline} $trunc.bv128.bv64(i1: bv128) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i128.i64(i1: i128) returns (i64) {i1}
function {:inline} $zext.i64.i128(i1: i64) returns (i128) {i1}
function {:inline} $sext.i64.i128(i1: i64) returns (i128) {i1}
function {:inline} $trunc.bv88.bv80(i1: bv88) returns (bv80) {i1[80:0]}
function {:inline} $trunc.i88.i80(i1: i88) returns (i80) {i1}
function {:inline} $zext.i80.i88(i1: i80) returns (i88) {i1}
function {:inline} $sext.i80.i88(i1: i80) returns (i88) {i1}
function {:inline} $trunc.bv96.bv80(i1: bv96) returns (bv80) {i1[80:0]}
function {:inline} $trunc.i96.i80(i1: i96) returns (i80) {i1}
function {:inline} $zext.i80.i96(i1: i80) returns (i96) {i1}
function {:inline} $sext.i80.i96(i1: i80) returns (i96) {i1}
function {:inline} $trunc.bv128.bv80(i1: bv128) returns (bv80) {i1[80:0]}
function {:inline} $trunc.i128.i80(i1: i128) returns (i80) {i1}
function {:inline} $zext.i80.i128(i1: i80) returns (i128) {i1}
function {:inline} $sext.i80.i128(i1: i80) returns (i128) {i1}
function {:inline} $trunc.bv96.bv88(i1: bv96) returns (bv88) {i1[88:0]}
function {:inline} $trunc.i96.i88(i1: i96) returns (i88) {i1}
function {:inline} $zext.i88.i96(i1: i88) returns (i96) {i1}
function {:inline} $sext.i88.i96(i1: i88) returns (i96) {i1}
function {:inline} $trunc.bv128.bv88(i1: bv128) returns (bv88) {i1[88:0]}
function {:inline} $trunc.i128.i88(i1: i128) returns (i88) {i1}
function {:inline} $zext.i88.i128(i1: i88) returns (i128) {i1}
function {:inline} $sext.i88.i128(i1: i88) returns (i128) {i1}
function {:inline} $trunc.bv128.bv96(i1: bv128) returns (bv96) {i1[96:0]}
function {:inline} $trunc.i128.i96(i1: i128) returns (i96) {i1}
function {:inline} $zext.i96.i128(i1: i96) returns (i128) {i1}
function {:inline} $sext.i96.i128(i1: i96) returns (i128) {i1}
